# handlers.py
from aiogram.filters.command import Command
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.types.input_file import FSInputFile

from keyboards import keyboard as kb
from functions import functions as func
from state.storage import Graphic
import logging

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    logging.info("Command /start received")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n–î–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—É—é –±—Ä–∞—Ç—å —Å —Å–∞–π—Ç–∞: https://finance.yahoo.com/",
                         reply_markup=kb.main_menu)


@router.message(Graphic.file)
async def get_file(message: types.Message, state: FSMContext, bot: Bot):
    if message.document is None:
        await message.answer("–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Ñ–∞–π–ª",
                             reply_markup=kb.main_menu)
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if not message.document.file_name.endswith('.csv'):
            await message.answer("–£–ø—Å—Å—Å—Å—Å—Å, –í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞. ü§≠\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–∞–π–ª .csv",
                                 reply_markup=kb.main_menu)
            return

        file = await bot.get_file(file_id=message.document.file_id)
        await bot.download_file(file_path=file.file_path, destination=message.document.file_name)
        await state.update_data(file=message.document.file_name)

        await state.set_state(Graphic.column)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫:')


@router.message(Graphic.column)
async def set_column(message: types.Message, state: FSMContext):
    column = message.text
    await state.update_data(column=column)

    await state.set_state(Graphic.graphics_to_build)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1, 2, 3, 4, 5, 6), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:'
                              '\n1. –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
                              '\n2. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
                              '\n3. –ì—Ä–∞—Ñ–∏–∫ ACF/PACF'
                              '\n4. –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤'
                              '\n5. –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª'
                              '\n6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞')

@router.message(Graphic.graphics_to_build)
async def create_graphics(message: types.Message, state: FSMContext, bot: Bot):
    graphics_to_build = message.text.split(',')
    await state.update_data(graphics_to_build=graphics_to_build)
    state_data = await state.get_data()
    filename = state_data['file']
    column = state_data['column']

    if '6' in graphics_to_build:
        await message.answer(text='–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É!\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Ü–∏—Ñ—Ä—É –∏–∑ —Ç–µ—Ö, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ\n–ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!üëã')
        return

    if '5' in graphics_to_build:
        await state.set_state(Graphic.file)
        await message.answer(text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫.')
        return

    if '2' in graphics_to_build:
        await state.set_state(Graphic.period)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–Ω—è—Ö:')
    else:
        func.make_graphic(filename=filename, column=column, graphics_to_build=graphics_to_build)
        await send_graphics(message, graphics_to_build, bot)
        await state.set_state(Graphic.graphics_to_build)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1, 2, 3, 4, 5, 6), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:'
                                  '\n1. –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
                                  '\n2. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
                                  '\n3. –ì—Ä–∞—Ñ–∏–∫ ACF/PACF'
                                  '\n4. –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤'
                                  '\n5. –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª'
                                  '\n6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞')

@router.message(Graphic.period)
async def set_period(message: types.Message, state: FSMContext, bot: Bot):
    period = int(message.text)
    state_data = await state.get_data()
    filename = state_data['file']
    column = state_data['column']
    graphics_to_build = state_data['graphics_to_build']

    func.make_graphic(filename=filename, column=column, graphics_to_build=graphics_to_build, period=period)
    await send_graphics(message, graphics_to_build, bot, period)

    await state.set_state(Graphic.graphics_to_build)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1, 2, 3, 4, 5, 6), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:'
                              '\n1. –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
                              '\n2. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
                              '\n3. –ì—Ä–∞—Ñ–∏–∫ ACF/PACF'
                              '\n4. –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤'
                              '\n5. –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª'
                              '\n6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞')

async def send_graphics(message: types.Message, graphics_to_build: list, bot: Bot, period: int = None):
    if '1' in graphics_to_build:
        await message.answer_photo(photo=FSInputFile('time_series_plot.png'),
                                   caption="–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
    if '2' in graphics_to_build and period is not None:
        await message.answer_photo(photo=FSInputFile('forecast_plot.png'),
                                   caption=f"–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ {period} –¥–Ω–µ–π")
    if '3' in graphics_to_build:
        await message.answer_photo(photo=FSInputFile('acf_pacf_plot.png'),
                                   caption="–ì—Ä–∞—Ñ–∏–∫ ACF –∏ PACF")
    if '4' in graphics_to_build:
        await message.answer_photo(photo=FSInputFile('residuals_plot.png'),
                                   caption="–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤")

@router.message(Graphic.restart)
async def restart_process(message: types.Message, state: FSMContext):
    if message.text == '5':
        await state.set_state(Graphic.file)
        await message.answer(text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫.')
    else:
        await cmd_start(message)
